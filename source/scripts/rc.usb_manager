#!/usr/bin/php
<?php
/* Copyright 2021, Simon Fairweather
 *
 * based on original code from Guilherme Jardim and Dan Landon
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin = "usb_manager";
$docroot = NULL ;
$docroot = $docroot ?: @$_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
require_once("$docroot/plugins/{$plugin}/include/lib_usb_manager.php");
require_once("webGui/include/Helpers.php");
require_once "$docroot/plugins/dynamix.vm.manager/include/libvirt_helpers.php";

$COMMAND = $argv[1];

if ($COMMAND != 'spindown') {
	$DEVNAME = (isset($_ENV['DEVNAME'])) ? $_ENV['DEVNAME'] : ( isset($argv[2]) ? $argv[2] : NULL );
	$DEVNAME = (file_exists($DEVNAME)) ? realpath($DEVNAME) : $DEVNAME;
} else {
	$DEVNAME = $argv[2];
}
$remove  = [];
#if (! $DEVNAME) die("Fail: device not defined.\n");

function usbip_modules_load() {
	global $plugin, $config;
	# Get Config file if load module is *YES process.
	$config_file = "/tmp/$plugin/config/$plugin.cfg";
	$cfg = is_file($config_file) ? @parse_ini_file($config_file, true) : array();
	$config = $cfg["Config"];
	if ($config["usbip_host"] == "yes") {
		usb_manager_log("info: Loading kernel module usbip_host");
		exec("modprobe usbip-host");
	}
	if ($config["vhci_hcd"] == "yes") {
		usb_manager_log("info: Loading kernel module vhci_hcd");
		exec("modprobe vhci_hcd");
	}
}

function usbipd_start() {
	$pid=shell_exec("pgrep usbipd") ;
	if ($pid!="") return ;
	usb_manager_log("Start usbipd");
	exec("usbipd -D --pid") ;	
}

function usbipd_stop() {
	$pid=shell_exec("pgrep usbipd") ;
	if ($pid==NULL) return ;
	usb_manager_log("Shutdown usbipd");	
	exec("killall usbipd") ;
}

function usbip_reload() {
	if (isset($_ENV['DEVLINKS'])) {
		foreach (explode(" ", $_ENV['DEVLINKS']) as $link) {
			get_udev_info($link, $_ENV, true);
		}
	}
}

function usbip_check_config() {
	global $config ;
	usbip_modules_load() ;
	$pid=shell_exec("pgrep -c  usbipd") ;
	if ($config["USBIPD"]=="enabled") {
		usbipd_start() ;
	} else {
		usbipd_stop() ;
	}		
	# Check if USB.INI exists if not initialise.
	if (!file_exists("/usr/local/emhttp/state/usb.ini")) {
		USBMgrBuildConnectedStatus() ;
	}
	if ($config["USBIPRC"]=="enabled") { $cron = "# Generated USBIP Checker schedule\n".$config["USBIPRCI"]." * * * * /usr/local/emhttp/plugins/usb_manager/scripts/rc.usb_manager \"usbiphostchecker\" > /dev/null 2>&1  \n\n"; 	}
	 	else { $cron="" ;	}
	parse_cron_cfg("usb_manager", "USBIPRC", $cron);
	if ($config["USBIPHF"]=="auto") { $cron = "# Generated USBIP Discovery schedule\n0 ".$config["USBIPHFI"]." * * * /usr/local/emhttp/plugins/usb_manager/scripts/rc.usb_manager \"usbiphostdiscovery\" > /dev/null 2>&1  \n\n"; } 
		else { 	$cron="" ; 	}
	parse_cron_cfg("usb_manager", "USBIPHF", $cron);
}

function tty_device_add_update_usb($serial) {
	global $usb_state ;
	$usbstatekey=USBMgrUpdatettyStatusEntry($_ENV['ID_SERIAL'], $_ENV['DEVNAME']) ;
	load_usbstate() ;
	$_ENV["DEVNUM"] = $usb_state[$usbstatekey]["dev"] ;
	$_ENV["BUSNUM"] = $usb_state[$usbstatekey]["bus"] ;
	usb_manager_log("Info: rc.usb_manager Processing tty attach {$_ENV['ID_SERIAL']} {$_ENV['DEVNAME']} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']}"); 
	usb_device_add_actionv2($serial,true) ;
		
}

function usb_device_add_actionv2($serial,$bypass=false) {
	global $usb_state;
	$vm_maps = load_vm_mappings();
	$hub_processing = get_config("Config","HUBPROC");
	$vm = $vm_maps[$serial]["VM"];
	$serialconnect = $vm_maps[$serial]["connectserial"];
	$usbstatekey=$_ENV['BUSNUM']."/".$_ENV['DEVNUM']; 
	$state = get_vm_state($vm);
	if (($state == "shutoff" || $state == "paused") && $vm_maps[$serial]["autoconnectvmstart"] == "yes") {
		# Start VM
		usb_manager_log("Info: rc.usb_manager starting/resuming vm as device connected {$vm} device map from state $state.");
		if ($state == "shutoff")  $start = start_vm($vm);
		if ($state == "paused")  $resume = resume_vm($vm);
		$state = "running";
	}
	$vm .= ";".$_ENV['BUSNUM'].";".$_ENV['DEVNUM'].";".$_ENV['ID_SERIAL'].";Auto;Device;";
	if ($bypass == false) {
		USBMgrCreateStatusEntry($_ENV['ID_SERIAL'], $_ENV['BUSNUM'], $_ENV['DEVNUM']);
	}
	load_usbstate();
	$class = $usb_state[$usbstatekey]["class"];
	$isSerial = $usb_state[$usbstatekey]["isSerial"];
	if ($usb_state[$usbstatekey]["bNumInterfaces"] > 1 ) {
		usb_manager_log("Info: rc.usb_manager Add device with more than one interface & connect serial {$serialconnect} {$bypass} {$isSerial}.");
		if ($bypass == false && $isSerial != 'yes' && $serialconnect == "yes") {
			usb_manager_log("Info: rc.usb_manager unable to connect device as Serial device details unknown for {$serial}.");
			return ;
		}
	}	
	# Process Device Map based on Serial Number.
	if ($vm_maps[$serial]["autoconnect"] == "yes" && $class == "interface" ) {
		if ($state != "shutoff" && $state != "nostate") {
			usb_manager_log("Info: rc.usb_manager Autoconnect vm state:{$state} {$_ENV['ID_SERIAL']} {$state} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']}");
			vm_map_action($vm, "attach") ;
			return ;
		} else 	usb_manager_log("Info: rc.usb_manager Autoconnect ignored VM not running state:{$state} {$_ENV['ID_SERIAL']} {$_ENV['DEVNAME']} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']}"); 		
	}
	# Process device based on attached port. x-x.x etc
	$udevcmd = "udevadm info -a   --name=/dev/bus/usb/".$_ENV['BUSNUM']."/".$_ENV['DEVNUM']." | grep KERNEL==" ;
	exec( $udevcmd , $udev);
	$physical_busid = trim(substr($udev[0], 13) , '"') ;
	$port_map="Port:".$physical_busid ;
	if (isset($vm_maps[$port_map])) {
		$vm = $vm_maps[$port_map]["VM"];
		$serialconnect = $vm_maps[$port_map]["connectserial"];
		if ($vm_maps[$port_map]["autoconnect"] == "yes" && $class == "interface" ) {
			$state = get_vm_state($vm);
			if (($state == "shutoff" || $state == "paused") && $vm_maps[$port_map]["autoconnectvmstart"] == "yes") {
				# Start VM
				usb_manager_log("Info: rc.usb_manager starting vm as device connected {$vm} port map from state $state.");
				if ($state == "shutoff")  $start = start_vm($vm); 
				if ($state == "paused")  $resume = resume_vm($vm); 
				$state = "running";
			}
			$vm .=  ";".$_ENV['BUSNUM'].";".$_ENV['DEVNUM'].";".$_ENV['ID_SERIAL'].";Auto;Port";
			if ($state != "shutoff" && $state != "nostate") {
				usb_manager_log("Info: rc.usb_manager Autoconnect vm state:{$state} {$_ENV['ID_SERIAL']} {$state} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']} port {$physical_busid}");
				vm_map_action($vm, "attach") ;
				return ;
			} else usb_manager_log("Info: rc.usb_manager Autoconnect ignored VM not running state:{$state} {$_ENV['ID_SERIAL']} {$_ENV['DEVNAME']} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']} port {$physical_busid}"); 
		}	
	}
	# Process Device Based on a Hub
	if ($hub_processing == "enabled") {
		# Check to see if parent is a hub and process a hub mapping.
		if ($class == "interface") {
			$parent =  explode("," , $usb_state[$usbstatekey]["parents"]);
			$parent =  $parent[0] ;
			usb_manager_log("Info: rc.usb_manager Autoconnect Parent ".$parent);
			$hub_port_map="Port:".$parent;
			if (isset($vm_maps[$hub_port_map])) {
				$vm = $vm_maps[$hub_port_map]["VM"];
				if ($vm_maps[$hub_port_map]["autoconnect"] == "yes" ) {
					$state = get_vm_state($vm) ;
					if (($state == "shutoff" || $state == "paused") && $vm_maps[$hub_port_map]["autoconnectvmstart"] == "yes") {
						# Start VM
						usb_manager_log("Info: rc.usb_manager starting vm as device connected {$vm} hub port map from state $state.");
						if ($state == "shutoff")  $start = start_vm($vm); 
						if ($state == "paused")  $resume = resume_vm($vm);
						$state = "running" ;
					}
					$vm .=  ";".$_ENV['BUSNUM'].";".$_ENV['DEVNUM'].";".$_ENV['ID_SERIAL'].";Auto;Hub"; ;
					if ($state != "shutoff") {
						usb_manager_log("Info: rc.usb_manager Autoconnect Parent vm state:{$state} {$_ENV['ID_SERIAL']} {$state} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']} port {$physical_busid}");
						vm_map_action($vm, "attach") ;
						return ;
					}
					else usb_manager_log("Info: rc.usb_manager Autoconnect Parent ignored VM not running state:{$state} {$_ENV['ID_SERIAL']} {$_ENV['DEVNAME']} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']} port {$physical_busid}"); 	
				}
			}
		} 
	}
	usb_manager_log("Info: rc.usb_manager Autoconnect No Mapping found {$_ENV['ID_SERIAL']} {$_ENV['DEVNAME']} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']} port {$physical_busid}"); 
}

function usb_device_remove_action($bus, $dev) {
	global $usb_state;
	load_usbstate(); 
    foreach ($usb_state as $key => $usbdevice) {
		if ($usbdevice["bus"] == $bus && $usbdevice["dev"] == $dev) {
	   		$vm = $usbdevice["VM"];
	   		$serial = $key;
	   		usb_manager_log("Info: rc.usb_manager Device Match {$serial} vm: {$vm} {$state} {$bus} {$dev} ");	 
	   		break;
		}
	}
   	if (isset($serial)) {
		$state = get_vm_state($vm) ;
		if ($state != "shutoff" && $state != "nostate") {
			$vmname = $vm.";".$bus.";".$dev.";".$usbdevice["ID_SERIAL"].";Auto;Device;";	 
			vm_map_action($vmname, "detach");
			usb_manager_log("Info: rc.usb_manager Disconnect  {$serial} vm: {$vm} {$state} {$bus} {$dev} ");
		}
		remove_usbstate($serial);
		remove_usbstate($bus."/".$dev);
		usb_manager_log("Info: rc.usb_manager Removed {$serial} vm: {$vm} {$state} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']}");
   	}
}

function process_vm_usb_devices($vm, $action) {
		 global $usb_state;
		 load_usbstate(); 
		 $hub_processing = get_config("Config","HUBPROC");
		# Process Stopped VM
		if ($action == "stopped") {
			# Update usb.ini. Remove VM and Connected.
			foreach ($usb_state as $key => $state) {
				if ($vm == $state["VM"]) {
					$bus = $state["bus"];
					$dev = $state["dev"];
					save_usbstate($key, "virsherror" , false);
					save_usbstate($key, "connected" , false);
					save_usbstate($key, "VM" , "");
					usb_manager_log("Info: rc.usb_manager VM Shutdown {$key} vm: {$vm} ");
				}
			}
		} else {
			
		# Process Starting VM	
		$inuse_devices=get_inuse_devices();
		$vm_mappings=load_vm_mappings(); 
    	foreach ($vm_mappings as $key => $vm_map) {
	  		if ($vm == $vm_map["VM"]) {
				$usbkey = "" ;
				$type = "Device" ;
				if (substr($key,0,5) == "Port:") {
					foreach ($usb_state as $usbstatekey => $state)	
					{
						
						if ($state["USBPort"] == substr($key, 5,strlen($key))) {
					
							$usbkey = $usbstatekey ;
							$type = "Port" ;
							usb_manager_log("Info: rc.usb_manager Autoconnect Port Map {$key} {$serial} vm: {$vm} ");
							#break ;
						}
					}
				} else {
					#v2
					$usbkey="" ;
					foreach ($usb_state as $usbstatekey => $state)	
					{
						
						if ($state["ID_SERIAL"] == $key) {
							$usbkey=$state["bus"]."/".$state["dev"] ;
							break ;
						}
					}
					#$usbkey=$key ;	#v2

					$type = "Device" ;
				}
               # var_dump($usbkey,$usb_state[$usbkey]) ;
	    		if (isset($usb_state[$usbkey])	) {        		

	     			$bus = $usb_state[$usbkey]["bus"];
	     			$dev = $usb_state[$usbkey]["dev"];

					$class = $usb_state[$usbkey]["class"] ;
					$port = $usb_state[$usbkey]["USBPort"] ;
					$srlnbr = $usb_state[$usbkey]["ID_SERIAL"] ;
					#var_dump($hub_processing) ;
					
					if ($hub_processing == "enabled") {					
					if ($class != "interface") {
						#usb_manager_log("Info: rc.usb_manager Autoconnect is not interface {$class}") ;
						#echo $class ;
						if ($class == "hub") {
							#usb_manager_log("Info: rc.usb_manager Autoconnect is hub {$class}") ;
							#echo "Process Hub" ;
						  	foreach($usb_state as $key2=>$parent_state) {
							 	$parents = explode("," , $parent_state["parents"] );
							  	$parent = $parents[0] ;
								$vmname = $vm.";".$parent_state["bus"].";".$parent_state["dev"].";".$srlnbr.";Auto;Hub;" ;
								if ($parent == $port)
							   	{
									#usb_manager_log("Info: rc.usb_manager Autoconnect for hub {$key2} {$vmname}"); 
									if ($action == "prepare") {
						 
										if ($usb_state[$key2]["connected"]== "1") {
											usb_manager_log("Info: rc.usb_manager Autoconnect Start {$key2} vm: {$vm} Device in Use action ignored. ");
										} else {
											
										if (isset($inuse_devices["usb"][$port])) {
										if ($inuse_devices["usb"][$port]["unraid"] || $inuse_devices["usb"][$port]["mounted"] || $inuse_devices["usb"][$port]["zpool"]) {
										usb_manager_log("Info: rc.usb_manager Autoconnect Start {$usbkey} vm: {$vm} Device in Use outside USB Manager action ignored. ");
										continue ;
										}
										if ($inuse_devices["usb"][$port]["VM"] != "") {
										usb_manager_log("Info: rc.usb_manager Autoconnect Start {$usbkey} vm: {$vm} Device in Use outside USB Manager for another VM action ignored. ");
										continue ;
							  			}
										}
											usb_manager_log("Info: rc.usb_manager Autoconnect for hub {$key2} {$vmname} ".$vm_map["autoconnectstart"]); 
									   	if ($vm_map["autoconnectstart"] == "yes") {
										   vm_map_action($vmname, "attach") ;
										   usb_manager_log("Info: rc.usb_manager Autoconnect Start {$key2} vm: {$vm} ") ;
										   load_usbstate();
										} 
									}
								}
							   	}
						  	}
							continue ;
					 	}
					}
				}

					$vmname = $vm.";".$bus.";".$dev.";".$srlnbr.";Auto;".$type.";" ;	 
	     
#	   				if ($action == "prepare" ) {
					if ($action == "prepare" && $class=="interface") {						   
						 
						if ($usb_state[$usbkey]["connected"]== "1") {
							usb_manager_log("Info: rc.usb_manager Autoconnect Start {$usbkey} vm: {$vm} Device in Use action ignored. ");
							continue ;	}
							var_dump($inuse_devices) ;
						if (isset($inuse_devices["usb"][$port])) {
							#var_dump($inuse_devices["usb"][$port]) ;
							if ($inuse_devices["usb"][$port]["unraid"] || $inuse_devices["usb"][$port]["mounted"] || $inuse_devices["usb"][$port]["zpool"]) {
							usb_manager_log("Info: rc.usb_manager Autoconnect Start {$usbkey} vm: {$vm} Device in Use outside USB Manager action ignored. ");
							continue ;
							}
							if ($inuse_devices["usb"][$port]["VM"] != "") {
								usb_manager_log("Info: rc.usb_manager Autoconnect Start {$usbkey} vm: {$vm} Device in Use outside USB Manager for another VM action ignored. ");
								continue ;
							}	
							
						}
						if ($vm_map["autoconnectstart"] == "yes") {
						   vm_map_action($vmname, "attach") ;
						   usb_manager_log("Info: rc.usb_manager Autoconnect Start {$usbkey} temp vm: {$vm} ");
						   load_usbstate();
					    }
	  				}
					if ($action == "disconnect") {
						vm_map_action($vmname, "detach");
						usb_manager_log("Info: rc.usb_manager Disconnect {$usbkey} vm: {$vm} ");
					} 
	    		}
			}
		}
	}
}

function usb_manager_syslog_processing($sl_busid) {
	exec("tail -n 20 /var/log/syslog", $syslog ) ;
	$syslog=array_reverse($syslog) ;
	$config_file = $GLOBALS["paths"]["usb_rmt_connect"];
	$config = @parse_ini_file($config_file, true);
	$p2 = preg_match('/(.*) (?P<busid>\S+)/', $sl_busid, $arrMatchsl );
	$busid= $arrMatchsl["busid"] ;
	foreach ($syslog as $syslog_entry) {
	#	Feb 13 15:59:19 Tower usbipd: usbipd: info: connection from 192.168.1.29:46248
	#	Feb 13 15:59:19 Tower usbipd: usbipd: info: received request: 0x8003(6)
	#	Feb 13 15:59:19 Tower usbipd: usbipd: info: found requested device: 3-2.2
	#	Feb 13 15:59:19 Tower usbipd: usbip: info: connect: 3-2.2
	#	Feb 13 15:59:19 Tower kernel: usbip-host 3-2.2: stub up
	#	Feb 13 15:59:19 Tower usbipd: usbipd: info: request 0x8003(6): complete
	#	Feb 13 15:59:19 Tower USBIP: debug: usbip syslog filter triggered
		$arrMatch =array() ;	
		$p = preg_match('/(.*) connection from (?P<IP>\S+):(?P<port>\S+)/', $syslog_entry, $arrMatch );
		if ($p ) {
			$config[$busid]["port"] = $arrMatch["port"];
			$config[$busid]["IP"] = $arrMatch["IP"];
			$config[$busid]["hostname"] = gethostbyaddr($arrMatch["IP"]);
		}
	}
	save_ini_file($config_file, $config);
}

function process_cmdline($mode,$value,$vm,$action) {
		global $usb_state;
		load_usbstate(); 
		$tj = array();
		$found = false;
	
		if ($mode == "cmdlinedevice") {
			# find device for Serial
			foreach($usb_state as $key => $entry) {
				if ($entry["ID_SERIAL"] == $value) {
					$tj['BUSNUM'] = $entry['bus'];
					$tj['DEVNUM'] = $entry['dev'];
					$tj['ID_SERIAL'] = $entry['ID_SERIAL'];
					$found = true;
				}
			}
			if (!$found) return("error: Device not found\n");
		} else {
			# Build array from udevadm 
			# udevadm info --query=property -x --path=/sys/bus/usb/devices/ + busid 
			$udev=array();
			exec('udevadm info --query=property  --path=/sys/bus/usb/devices/'.$value, $udev);
			foreach ($udev as $udevi) {
				$udevisplit=explode("=",$udevi);
				$tj[$udevisplit[0]] = $udevisplit[1];
			}
		}
			
		$usbkey="{$tj['BUSNUM']}/{$tj["DEVNUM"]}";
		if ($usb_state[$usbkey]["connected"]== "1" && $action == "attach") {
			return("error: Device in use attach action ignored\n");
		}
		if ($usb_state[$usbkey]["connected"]== "" && $action == "detach") {
			return("error: Device not in use detach action ignored\n");
		}

		$return = vm_map_action("$vm;{$tj['BUSNUM']};{$tj["DEVNUM"]};{$tj['ID_SERIAL']};Manual;CMDLine",$action,true);
		return $return;
}

switch ($COMMAND) {
	case 'modules_load':
		usbip_modules_load();
		break;
	case 'start_daemon':
		usbipd_start();
		break;
	case 'stop_daemon':
		usbipd_stop();
		break;
	case 'reload':
		usbip_reload();
		break;
	case 'refresh':
		break;
	case 'usbiphostchecker':	
		$ports=parse_usbip_port();
		$remotes=get_remote_usbip();
		foreach($remotes as $rmt) {
			$output=parse_usbip_remote($rmt["ip"]);
			$remote[$rmt["ip"]]=$output[$rmt["ip"]];
		}
		$attached= array();
		foreach($ports as $port) {
			$arrMatch = array() ;
			if (preg_match('/\s+(?P<localusbid>\S+) -> usbip:\/\/(?P<ip>\b(?:(?:2(?:[0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9])\.){3}(?:(?:2([0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9]))\b):[0-9]+\/(?P<usbid>\S+)/', $port[2], $arrMatch)) {
				$attached[$arrMatch["ip"]][$arrMatch["usbid"]] = $arrMatch["usbid"] ;
			}
		}
		$usbipnotconnected = array() ;
		foreach($remote as $rmtipkey => $remoteip) {	
			foreach($remoteip as $key => $data) {
				$remoteusbip = trim($key);
				if (isset($attached[$rmtipkey][$remoteusbip])) continue;
				$usbipnotconnected[$rmtipkey][$remoteusbip] = $remoteusbip;
			}
		}
		# Process connecting devices.
		foreach($usbipnotconnected as $key => $usbiprmt) {
			foreach($usbiprmt as $key2 => $usbipport) {
				if ($key2 == "NONE") continue;
				$cmd = "usbip attach -r ".$key." -b ".$key2;
				usb_manager_log("Info: rc.usb_manager USBIP Host Check {$key} {$key2} command to run {$cmd}") ;
				$cmd .= " 2>&1";
				$cmdoutput = array() ;
				exec($cmd,$cmdoutput,$return);
				if ($return) {
					$error = implode("\n",$cmdoutput);
					usb_manager_log("Info: rc.usb_manager USBIP Host Check attached failed {$error}") ;
				}
			}
		}
		break ;
	case 'usbiphostdiscovery':
		$run = get_config("Config","USBIPHF") ;
		if ($run == "manual") return ;
		$usbiprmthostscan =  $usbiprmthosts = $local_host_ips = array();
		for ($i=0; $i < 11; $i++) { 
			$_var = "eth{$i}";
			if (isset($$_var)) {
				$iface = $$_var;
				$gateway = array_values(array_flip(preg_grep("/GATEWAY:/", array_flip($iface))));
				$ipaddr	= array_values(array_flip(preg_grep("/IPADDR:/",	array_flip($iface))));	
				$netmask = array_values(array_flip(preg_grep("/NETMASK/",	array_flip($iface))));
				for ($z=0; $z < count($ipaddr); $z++)
				{ 
					$local_host_ips[$ipaddr[$z]]["gateway"] =  $gateway[$z] ;
					$local_host_ips[$ipaddr[$z]]["netmask"] =  $netmask[$z] ;
					exec("/usr/bin/timeout -s 13 5 plugins/{$plugin}/scripts/port_ping.sh {$ipaddr[$z]} {$netmask[$z]} 3240 2>/dev/null | sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4", $usbiprmthostscan);
				}
			}
		}
		foreach($usbiprmthostscan as $key=>$scan) { $usbiprmthosts[$scan] = $scan;}
		$rmthost=get_remote_usbip();
		$action = get_config("Config","USBIPHFA");
		$local_host  = get_config("Config","USBIPFE");
		if ($action == "both" || $action == "add") {
			foreach($usbiprmthosts as $host){
				if ($local_host == "no" && isset($local_host_ips[$host])) continue ;	
				if (!isset($rmthost[$host])) set_remote_host_config($host,"ip" ,$host) ;
			}
		}
		if ($action == "both" || $action == "remove") {
			foreach($rmthost as $key=>$host) {
				if (!isset($usbiprmthosts[$key])) { remove_config_remote_host($key) ; }
			}
		}
		break;				
	case 'usb_add':
		usb_manager_log("Info: rc.usb_manager {$argv[1]} {$_ENV['ID_SERIAL']} {$_ENV['DEVNAME']} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']}");
		usb_device_add_actionv2($_ENV['ID_SERIAL']);
		break;
	case 'tty_add':
		usb_manager_log("Info: rc.usb_manager {$argv[1]} {$_ENV['ID_SERIAL']} {$_ENV['DEVNAME']} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']}");
		tty_device_add_update_usb($_ENV['ID_SERIAL']);
		break;
	case 'usb_remove':
		usb_manager_log("Info: rc.usb_manager {$argv[1]} {$physical_busid} {$_ENV['ID_SERIAL']} {$_ENV['DEVNAME']} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']} ");
		usb_device_remove_action($_ENV['BUSNUM'] ,$_ENV['DEVNUM'] );
		break;
	case 'vm_action':
		usb_manager_log("Info: rc.usb_manager  {$argv[1]} {$argv[2]} {$argv[3]} {$argv[4]} {$argv[5]}");
		process_vm_usb_devices($argv[2],$argv[3] );
		break;	
	case 'check_config':
		usbip_check_config();
		break;	
	case 'cmdlineport':
	case 'cmdlinedevice':
		usb_manager_log("Info: rc.usb_manager  {$argv[1]} {$argv[2]} {$argv[3]} {$argv[4]} {$argv[5]}");
		$rtn = process_cmdline($argv[1], $argv[2],$argv[3],$argv[4]);
		echo $rtn;
		if (strpos($rtn,"error:",0) !== false) {exit(2);}
		break;		
	case 'usb_syslog':
		echo "Syslog";
		usb_manager_syslog_processing($argv[2]);
		break;	
	case 'USBMgrBuildConnectedStatus':
		usb_manager_log("Info: rc.usb_manager Building Connected Status");
		USBMgrBuildConnectedStatus();
		break;	
	case 'USBMgrResetConnectedStatus':
		usb_manager_log("Info: rc.usb_manager Reset Connected Status");
		USBMgrResetConnectedStatus();
		break;	
	case 'USBMgrUpgradeConnectedStatus':
		usb_manager_log("Info: rc.usb_manager Upgrade Connected Status");
		USBMgrUpgradeConnectedStatus();
		break;	
	case 'USBMgrUpgradeConnectedStatusv2':
		usb_manager_log("Info: rc.usb_manager Upgrade Connected Status");
		USBMgrUpgradeConnectedStatusv2();
		break;	
	default:
		usb_manager_log("Error: rc.usb_manager {$argv[1]} {$argv[2]} {$argv[3]} {$argv[4]} not understood");
		usb_manager_log("rc.usb_manager usage: 'modules_load','start_daemon','stop_daemon', 'reload', 'refresh', 'check_config");
		exit(0);
		break;
}
?>
