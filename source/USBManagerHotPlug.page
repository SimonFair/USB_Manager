Menu="VMs:99"
Title="USB Manager Hotplug"
Cond="parse_ini_file('/tmp/usb_manager/config/usb_manager.cfg')['HOTPLUG'] == 'enabled'"
---
<?PHP
/* Copyright 2021-2021, Simon Fairweather
 *
 * Based on Libvirt hotplug plugin by:
 *
 * Copyright 2016, Burhan Shakil 
 * Copyright 2018-2021, Dan Landon 
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 3,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
$plugin = "usb_manager";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
$translations = file_exists("$docroot/webGui/include/Translations.php");
require_once "$docroot/plugins/$plugin/include/Legacy.php";
require_once("plugins/{$plugin}/include/lib_usb_manager.php");
?>
<?if (!$translations):?>
<?eval('?>'.parse_file("$docroot/plugins/$plugin/USBManagerHotPlug.page"))?>
<?else:?>
<?

/* read translations. */
parse_plugin('USBManagerHotPlug');

require_once('/usr/local/emhttp/webGui/include/Helpers.php');
require_once('/usr/local/emhttp/plugins/dynamix.vm.manager/include/libvirt.php');
require_once('/usr/local/emhttp/plugins/dynamix.vm.manager/include/libvirt_helpers.php');

$arrValidUSBDevices = getValidUSBDevices();
$uuid = $_GET['uuid'];	

/* Get domain variables for each domain. */
$doms = $lv->get_domains();
$vmlist=array();

for ($i = 0; $i < sizeof($doms); $i++) 
{
	global $vmlist;
	$name = $doms[$i];
	$res = $lv->get_domain_by_name($name);
	$dom = $lv->domain_get_info($res);
	$state = $lv->domain_state_translate($dom['state']);
	if ($state == 'running')
	{	
		global $vmlist;
		$vmlist[]=array('name'=>$name);
		asort($vmlist);
	}
}


function usbm_list_usbs() 
{
	global $arrValidUSBDevices;
	$out = array();
	if (!empty($arrValidUSBDevices)) 
	{
		foreach($arrValidUSBDevices as $i => $arrDev) 
		{
			$out[] = array('name'=>$arrDev['name'],'id'=>$arrDev['id']);
		} 
	}
	else 
	{
		$out[] = array('name'=>"None available");
	}
    $out= get_all_usb_info() ;
    		foreach ($out as $busid => $detail) {
            if ($detail["isflash"] == "hub") { unset($out[$busid]) ; continue ; }
			if ($detail["ishub"] == "interface") continue ;
			if ($detail["ishub"] == "hub") unset($out[$busid]) ;
		 	if ( $detail["ishub"] == "roothub") unset($out[$busid]) ;
            }
    
	ksort($out,SORT_NATURAL  ) ;
	return $out;
}

function usbm_list_attached_usbs() 
{
	global $arrValidUSBDevices;
	$out = array();
	if (!empty($arrValidUSBDevices)) 
	{
		foreach($arrValidUSBDevices as $i => $arrDev) 
		{
			$out[] = array('name'=>$arrDev['name'],'id'=>$arrDev['id']);
		} 
	}
	else 
	{
		$out[] = array('name'=>"None available");
	}
    $out= get_all_usb_info() ;
    		foreach ($out as $busid => $detail) {
            if ($detail["isflash"] == "hub") { unset($out[$busid]) ; continue ; }
			if ($detail["ishub"] == "interface") continue ;
			if ($detail["ishub"] == "hub") unset($out[$busid]) ;
		 	if ( $detail["ishub"] == "roothub") unset($out[$busid]) ;
            }
    
	ksort($out,SORT_NATURAL  ) ;
	return $out;
}
?>

<script>

var UDURL		= '/plugins/<?=$plugin;?>/USBDevices.php';


function usbm_operateUSB(action) 
{
	var vms = $("select[name=usbm_vms] option:selected").val();
	var usbs = $("select[name=usbm_devs] option:selected").val();
	if (vms ) {
		switch (action) {
			case 'vm_disconnect':
				status = "<?=_('Detaching Please wait')?>"+"...";
					var usbs = $("select[name=usbm_devs2] option:selected").val();
				break;

			case 'vm_connect':
				status = "<?=_('Attaching Please wait')?>"+"...";
				break;
		}	
		if (usbs) {		
		$("textarea[name=usbm_Status]").val(status);
		$("#detach").attr("disabled", true);
		$("#attach").attr("disabled", true);
		var opts = new Object();
		opts["action"] = action;
		opts["vm"] = vms+';'+usbs;
		opts["USBID"] = usbs;
		$.post(UDURL,opts).done(function(data){
			if (data) {
                result = JSON.parse(data) ;
				$("textarea[name=usbm_Status]").val(result.status);
			}
			$("#detach").attr("disabled", false);
			$("#attach").attr("disabled", false);
			BuildAttachlist() ;
			BuildAvailablelist() ;
		});
	} else {
		$("textarea[name=usbm_Status]").val("<?=_('No USB devices selected')?>!"); 
		}
	
	} else {
				
			$("textarea[name=usbm_Status]").val("<?=_('No VM Selected')?>!");	
		
	}
}
	$('#usbm_devs').select(function()
	{
		document.getElementById("hidden-item").value = (this).selected ;
		alert(document.getElementById("hidden-item").value);
	});

	function update( elem ) {
		document.getElementById("hidden-item").value = (this).selected ;
		alert(document.getElementById("hidden-item").value);
		 }

		 function myFunction(val) {
  alert("The input value has changed. The new value is: " + val);
}

			
		

function BuildAttachlist() {
  var value = document.getElementById("vms").value;  
 document.getElementById("usb2").options.length = 0;
 var opts = new Object();
 		opts["action"] = 'getinusevm' ;
		opts["vm"] = value ;
		if (value != "") {
 		$.post(UDURL,opts).done(function(data){
			if (data) {
                const result = JSON.parse(data) ;
				var x = document.getElementById("usb2");

				for( index in result ) {  
					var value = result[index] ; 
					var option = document.createElement("option");
					option.value = value.BUSNUM+";"+value.DEVNUM+";"+value.ID_SERIAL+";Manual;VMHotplug;" ;
					if (value.volume == null) value.volume = "" ;
					option.text = index+" "+value.ID_SERIAL+" "+value.volume ;
					x.add(option);
				
					}}}) ;
				
				}
		
}

function BuildAvailablelist() {
 
 document.getElementById("usb1").options.length = 0;
 var opts = new Object();
 		opts["action"] = 'getavailable' ;
		
 		$.post(UDURL,opts).done(function(data){
			if (data) {
                const result = JSON.parse(data) ;
				var x = document.getElementById("usb1");

				for( index in result ) {  
					var value = result[index] ; 
					var option = document.createElement("option");
					option.value = value.BUSNUM+";"+value.DEVNUM+";"+value.ID_SERIAL+";Manual;VMHotplug;" ;
					if (value.volume == null) value.volume = "" ;
					option.text = index+" "+value.ID_SERIAL+" "+value.volume ;
					x.add(option);
				
					}}}) ;
				
			
		
}

</script>


<div style="width: 100%; float:left" id="USB">
<form markdown="1" id="USBF" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="hidden-item" value="HA"  **form="USBF"** />
<dl>
<table>
<tr><td>
<?=_('Running VMs')?>:
	<select name="usbm_vms"  onchange="BuildAttachlist()" id="vms" size="1">
	<?foreach ($vmlist as $vms):?>
	<?=mk_option("",$vms['name'],$vms['name'])?>
	<?endforeach;?>
	</select>


</td><td><input type="button" value="<?=_('Attach')?>" title="<?=_('Attach the USB device to the selected VM')?>" onclick="usbm_operateUSB('vm_connect');" id="usbm_attach" style="margin-top:0"></td><td>
<?=_('Available USB Devices')?>:</td><td>
	<select name="usbm_devs"  size="1" id="usb1" style="width:auto;">
	<?#foreach (get_all_available() as $busid => $usb):?>
    <?#$usbid = $usb['BUSNUM'].";".$usb['DEVNUM'].";".$usb['ID_SERIAL'].";Manual;VMHotplug;" ;?>	
	<?#=mk_option("",$usbid,$busid." ".$usb['ID_SERIAL']." ".$usb['volume'] )?>
	<?#endforeach;?>
	</select>

</td></tr>
<tr><td></td><td><input type="button" value="<?=_('Detach')?>" title="<?=_('Detach the USB device from the selected VM')?>" onclick="usbm_operateUSB('vm_disconnect');" id="usbm_detach" style="margin-top:0"></td><td>
	<?=_('Attached devices USB Devices for selected VM')?>: </td><td>
	<select name="usbm_devs2" size="1" id="usb2" placeholder="No Devices"
	   style="width:auto;"
  >
	<?#foreach (usbm_list_usbs() as $busid => $usb):?>
    <?#$usbid = $usb['BUSNUM'].";".$usb['DEVNUM'].";".$usb['ID_SERIAL'].";Manual;VMHotplug;" ;?>	
	<?#=mk_option("",$usbid,$busid." ".$usb['ID_SERIAL']." ".$usb['volume'] )?>
	<?#endforeach;?>
	</select>
</td></tr></table>	

</dl>



<script>
BuildAttachlist()
BuildAvailablelist()
</script>
<dt><strong><?=_('Result')?>:</strong></dt>
<textarea readonly name="usbm_Status" rows="5" cols="80" title='_(Result of attach/detach operation)_' style="font-family:bitstream;width:100%"></textarea>



<input type="button" value="<?=_('Refresh')?>" title="<?=_('Refresh this page')?>" onclick="refresh()">
</form>
</div>
<?endif;?>