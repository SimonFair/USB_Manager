<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
<!ENTITY name      "usb_manager">
<!ENTITY author    "SimonFair">
<!ENTITY version   "2021.07.09a">
<!ENTITY launch    "USBManagerSettings">
<!ENTITY gitURL    "https://raw.githubusercontent.com/SimonFair/USB_Manager/master">
<!ENTITY pluginURL "&gitURL;/usb_manager.plg">
<!ENTITY supportURL	"https://forums.unraid.net/topic/100511-plugin-usbip-commands/">
<!ENTITY packages	"/boot/config/plugins/&name;/packages">
<!ENTITY md5		"3af4dd3a24ed6be7179ba5845e064788">
]>

<PLUGIN name="&name;"
		author="&author;"
		launch="&launch;"
		version="&version;"
		pluginURL="&pluginURL;"
		support="&supportURL;"
		icon="fa-usb"
		min="6.8.0">

<CHANGES>
##USB_Manager
###&version;

  - Add display of Hotplug Devices on main USB page and allow detach.

2021.07.09

  - Fix Virsh error if both port and device mapping exist for a device a connection time.
  - Add USB Manager Hotplug page on VM page, to enable change options in settings. Base code from DLandons Hot plug plugin. Addition support to show on USB page if mapping doesn't exist in next release.

2021.06.02a

  - Fix table formating if both port and device mappings for new volume column
  - Add Log virsh calls.

2021.06.26
 
  - Enhancement Show Volume for USB Storage Devices.

2021.06.20

- Enhancement enable port processing for mappinng ports to VM at start.
- Update text on edit settings page to describe entry being changed.

2021.06.19

- Install QEMU hooks file code, thanks to ljm42 for code.

2021.06.08

- Fix USBIP command check.

2021.06.06

- Initial beta release.

If you are using USBIP-GUI continue to do so at this time. This plugin will suppercede USBIP-GUI in the future and will migrate configurations.

USBIP-GUI and USB_Manager cannot co-exist. If you want to replace USBIP-GUI then uninstall first, Config files we remane on the flash drive you can copy them to usb_manager directory.

USBIP and USBIP-HOST module are not loaded by default. If you want to use them enable USBIP in the Settings and click the install button to install the additional plug.

Add the following lines, see support page for complete code as cannot be insert here to /etc/libvirt/hooks/qemu after the PHP line, These will be automatically added in the a future release.


if ($argv[2] == 'prepare' || $argv[2] == 'stopped'){
    shell_exec("/usr/local/emhttp/plugins/usb_manager/scripts/rc.usb_manager vm_action '{$argv[1]}' {$argv[2]} {$argv[3]} {$argv[4]} ................

</CHANGES>

<!--
The 'pre-install' script.
-->
#

<!--
Get the plugin bundle.
-->
<FILE Name="&packages;/&name;-&version;.txz" Run="upgradepkg --install-new &packages;/&name;*%&packages;/&name;-&version;.txz">
<URL>"&gitURL;/&name;-&version;.txz"</URL>
<MD5>&md5;</MD5>
</FILE>

<!--
The 'post-updgrade' script.
-->
<FILE Run="/bin/bash">
<INLINE>
echo "Removing previous versons now upgrade has completed."
echo
# Remove old 'bundle' files.
rm -f $(ls &packages;/*.txz 2>/dev/null | grep -v '&version;')
</INLINE>
</FILE>

<!--
USB_Manager background start script.
-->
<FILE Name="/tmp/start_usb_manager" Mode="0770">
<INLINE>
#!/bin/bash
# Copy configuration files to tmp file system.
/usr/local/emhttp/plugins/&name;/scripts/copy_config.sh 2>/dev/null

#Start USBIPD if required.

if [ ! -z "$(pidof emhttpd)" ]; then
	/usr/local/emhttp/plugins/&name;/scripts/rc.&name; check_config 2>/dev/null
fi

# Remove the background start script.
rm -f /tmp/start_usb_manager 2>/dev/null
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/&name;/&name;.cfg">
<INLINE>
<![CDATA[
]]>
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/&name;/remote_usbip.cfg">
<INLINE>
<![CDATA[
]]>
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/&name;/vm_mappings.cfg">
<INLINE>
<![CDATA[
]]>
</INLINE>
</FILE>



<!--
The 'post-install' script.
-->
<FILE Run="/bin/bash">
<INLINE>
# Define Functions

download() {
#Download usbip
if wget -q -nc --show-progress --progress=bar:force:noscroll -O "&packages;/${KERNEL_V%%-*}/${PACKAGE}-1.txz" "${DL_URL}/${PACKAGE}-1.txz" ; then
  if [ "$(md5sum "&packages;/${KERNEL_V%%-*}/${PACKAGE}-1.txz" | cut -d ' ' -f1)" != "$(wget -qO- "${DL_URL}/${PACKAGE}-1.txz.md5" | cut -d ' ' -f1)" ]; then
    if [ -d &packages;/${KERNEL_V%%-*}/]; then
      rm -rf &packages;/${KERNEL_V%%-*}/;
    fi
    echo "-----ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR------"
    echo "--------------------------------CHECKSUM ERROR!---------------------------------"
  fi
  echo "-----------------Sucessfully downloaded usbip, please wait...!-----------------"
else
  echo "-----ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR------"
  echo "----------------------------Can't download usbip--------------------------------"
fi
}

check() {
if [ ! -f "&packages;/${KERNEL_V%%-*}/${PACKAGE}-1.txz" ]; then
  echo "+=============================================================================="
  echo "| WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING"
  echo "|"
  echo "| Don't close this window with the red 'X' in the top right corner until the 'DONE' button is displayed!"
  echo "|"
  echo "| WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING"
  echo "+=============================================================================="
  echo "---------------------Downloading usbip, please wait...!------------------------"
  echo "-----------This could take some time, please don't close this window!----------"
  download
elif [ ! -s "&packages;/${KERNEL_V%%-*}/${PACKAGE}-1.txz" ]; then
  rm -rf &packages;/${KERNEL_V%%-*}/${PACKAGE}-1.txz
  echo "-----ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR-----"
  echo "-----Download is empty please contact the developer of this plugin if the------"
  echo "-------plugin has been already built against the current Kernel version--------"
else
  echo
  echo "-----------------------------usbip found locally!------------------------------"
fi
}

install() {
#Install usbip package
installpkg "&packages;/${KERNEL_V%%-*}/${PACKAGE}-1.txz"
depmod -a > /dev/null
}

check_usbip_repo() {
#Check if usbip is already downloaded

if [ ! -z "$(modinfo usbip_host)" ]; then
    echo "--------------------------usbip already installed...!--------------------------"
else
    check
    echo "-----------------------Installing usbip, please wait...!-----------------------"
    install 
fi
}

#Define Variables

KERNEL_V="$(uname -r)"
PACKAGE="usbip"
DL_URL="https://github.com/ich777/unraid-plugins-repo/releases/download/$KERNEL_V"

# Install the plugin bundle.
# Create plugin directory
mkdir /boot/config/plugins/&name; 2>/dev/null
mkdir /usr/local/emhttp/plugins/&name; 2>/dev/null
mkdir -p /tmp/&name;/config 2>/dev/null

#if [ ! -d "&packages;/${KERNEL_V%%-*}" ]; then
#  mkdir -p "&packages;/${KERNEL_V%%-*}"
#fi

# Load Package from ich777 repo for usbip modules and commands.
#check_usbip_repo

# move the rules file
cp /usr/local/emhttp/plugins/&name;/99_persistent_usb_manager.rules /etc/udev/rules.d/
chmod 644 -R /etc/udev/rules.d/99_persistent_usb_manager.rules 2>/dev/null

# copy the syslog  rules config file
#cp /usr/local/emhttp/plugins/&name;/99_usb_manager_syslog.conf /etc/rsyslog.d/
#chmod 644 -R /etc/udev/rules.d/99_persistent_usb.rules 2>/dev/null

# Adjust plugin permissions.
chmod 755 -R /usr/local/emhttp/plugins/&name; 2>/dev/null

# Fix permissions of executable files
chmod +x /usr/local/emhttp/plugins/&name;/scripts/* /usr/local/emhttp/plugins/&name;/event/*

# Create a symlink to USB_Manager scripts.
ln -sf /usr/local/emhttp/plugins/&name;/scripts/rc.usb_manager /usr/local/sbin

# Copy Config to tmp and load modules.
at -M -f /tmp/start_usb_manager now 2>/dev/null

# reload udev rules
udevadm control --reload-rules

# restart rsyslogd
/etc/rc.d/rc.rsyslogd restart

# Update QEMU Hooks file.

/usr/local/emhttp/plugins/&name;/scripts/install.sh 2>/dev/null


echo 
echo "-----------------------------------------------------------"
echo " &name; has been installed."
echo " "
echo " Copyright 2016-2020, &author;"
echo " Version: &version;"
echo ""
echo "-----------------------------------------------------------"
echo 
</INLINE>
</FILE>

<!--
The 'remove' script.
-->
<FILE Run="/bin/bash" Method="remove">
<INLINE>

#Define Variables

KERNEL_V="$(uname -r)"
PACKAGE="usbip"

# Remove installed packages
find "&packages;/" -type f -iname "*.txz" -delete

rm -f /tmp/plugins/&name;.plg 
rm -r /tmp/&name;
rm  -f /etc/udev/rules.d/99_persistent_usb_manager.rules
rm  -f /etc/rsyslog.d/99_usb_manager_syslog.conf

#modprobe -r usbip_host
#modprobe -r vhci_hcd
#killall usbipd

# reload udev rules
udevadm control --reload-rules

# restart rsyslogd
/etc/rc.d/rc.rsyslogd restart

# Remove QEMU Hooks entries

/usr/local/emhttp/plugins/&name;/scripts/uninstall.sh 2>/dev/null


# Remove all plugin files from emhttp.
removepkg &packages;/&name;-&version;.txz 
#removepkg "&packages;/&name;/packages/${KERNEL_V%%-*}/${PACKAGE}-1.txz"
#depmod -a > /dev/null

echo 
echo "-----------------------------------------------------------"
echo " &name; has been uninstalled."
echo "-----------------------------------------------------------"
echo 

</INLINE>
</FILE>

</PLUGIN>
